/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/*eslint-disable */

/* harmony default export */ __webpack_exports__["a"] = (function (Nodes, index) {
  Nodes.forEach((item) => {
    item.classList.remove("active");
  });
  Nodes[index].classList.add("active");
});


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__frame_frame__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__business_home__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__business_course__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__business_works__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__business_about__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__business_team__ = __webpack_require__(7);
/* eslint-disable */
// import "@babel/polyfill"







   Object(__WEBPACK_IMPORTED_MODULE_0__frame_frame__["a" /* default */])();
   Object(__WEBPACK_IMPORTED_MODULE_1__business_home__["a" /* default */])();
   Object(__WEBPACK_IMPORTED_MODULE_3__business_works__["a" /* default */])();
   Object(__WEBPACK_IMPORTED_MODULE_2__business_course__["a" /* default */])();
   Object(__WEBPACK_IMPORTED_MODULE_4__business_about__["a" /* default */])();
   Object(__WEBPACK_IMPORTED_MODULE_5__business_team__["a" /* default */])();

window.onresize=function () {//监听屏幕重置
  var arrow = document.querySelector(".arrow");
  //li元素
  var headLiNodes = document.querySelectorAll(".headerNav .list>li");
  //上层元素
  var coverNodes = document.querySelectorAll(".headerNav .list .cover");
  var content = document.querySelector(".content");
  var mainList = document.querySelector(".mainList");
  var contentLiNodes = document.querySelectorAll(".content .mainList>li");
  var pointLiNodes = document.querySelectorAll(".content .points>li");
  //箭头初始位置
  arrow.style.left = headLiNodes[0].offsetLeft + headLiNodes[0].offsetWidth / 2 - arrow.offsetWidth / 2 + "px";
  //设置content每个li高度
  contentLiNodes.forEach((item) => {
    item.style.height = content.offsetHeight + "px";
  });

};


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__justSelf_justSelf__ = __webpack_require__(0);
/*eslint-disable */


/* harmony default export */ __webpack_exports__["a"] = (function () {

  //头部交互
  var arrow = document.querySelector(".arrow");
  //li元素
  var headLiNodes = document.querySelectorAll(".headerNav .list>li");
  //上层元素
  var coverNodes = document.querySelectorAll(".headerNav .list .cover");
  var content = document.querySelector(".content");
  var mainList = document.querySelector(".mainList");
  var contentLiNodes = document.querySelectorAll(".content .mainList>li");
  var pointLiNodes = document.querySelectorAll(".content .points>li");

  //箭头初始位置
  arrow.style.left = headLiNodes[0].offsetLeft + headLiNodes[0].offsetWidth / 2 - arrow.offsetWidth / 2 + "px";
  //设置content每个li高度
  contentLiNodes.forEach((item) => {
    item.style.height = content.offsetHeight + "px";
  });
  //遍历headLiNodes绑定点击事件
  headLiNodes.forEach((item, index) => {
    item.onclick = () => {
      move(index);

    }
  });
  //遍历pointLiNodes绑定点击事件
  pointLiNodes.forEach((item, index) => {
    item.onclick = () => {
      move(index);

    }
  });
  // content监听滚轮事件
  content.index = 0;
  var timer = null;
  // chrome ie
  content.onmousewheel = (event) => {
    clearTimeout(timer);
    timer = setTimeout(() => {
      scrollFn(event, content.index)
    }, 500)
  };
  // firefox
  content.addEventListener('DOMMouseScroll', (event) => {
    clearTimeout(timer);
    timer = setTimeout(() => {
      scrollFn(event, content.index)
    }, 500)

  });

//封装滚轮callback
  function scrollFn(event, index) {
    //定义变量记录滚动方向
    var dir = '';
    if (event.wheelDelta) {
      // ie chrome
      if (event.wheelDelta > 0) {
        dir = 'up';
      } else {
        dir = 'down';
      }
    } else if (event.detail) {
      // firefox
      if (event.detail < 0) {
        dir = 'up';
      } else {
        dir = 'down';
      }
    }

    if (dir === 'up') {
      index > 0 ? index-- : 0;
      move(index)
    } else if (dir === 'down') {
      index < (pointLiNodes.length - 1) ? index++ : (pointLiNodes.length - 1);
      move(index)
    }
  }

  //封装move事件
  function move(index) {
    content.index = index;
    //cover层排他
    Object(__WEBPACK_IMPORTED_MODULE_0__justSelf_justSelf__["a" /* default */])(coverNodes,index);

    //小圆点排他
    Object(__WEBPACK_IMPORTED_MODULE_0__justSelf_justSelf__["a" /* default */])(pointLiNodes,index);
    //箭头move
    arrow.style.left = headLiNodes[index].offsetLeft + headLiNodes[index].offsetWidth / 2 - arrow.offsetWidth / 2 + "px";
    //切换每一屏
    mainList.style.top = -index * content.offsetHeight + "px";
  }


});




/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__justSelf_justSelf__ = __webpack_require__(0);
/*eslint-disable */


/* harmony default export */ __webpack_exports__["a"] = (function () {
  window.onload = function () {

    var bannerList = document.querySelector(".bannerList");
    var bannerListNodes = bannerList.querySelectorAll("li");
    var bannerPoints = document.querySelector(".bannerPoints");
    var bannerPointsNodes = bannerPoints.querySelectorAll("li");
    var oldIndex = 0;
    var autoIndex = 0;
    var timer = null;
    //自动播放
    autoPlay();
    //移出自动播放
    bannerList.onmouseleave = () => {
      //自动播放
      autoPlay();
    };
    //移入停止
    bannerList.onmouseenter=()=>{
      clearInterval(timer);
    };

    //点击小圆点
    bannerPointsNodes.forEach((item, index) => {
      item.index = index;
      item.onclick = function () {
        clearInterval(timer);
        //排他
        Object(__WEBPACK_IMPORTED_MODULE_0__justSelf_justSelf__["a" /* default */])(bannerPointsNodes, index);
        //move
        if (oldIndex === this.index) {
          return;
        }
        clearClass(bannerListNodes[this.index]);
        clearClass(bannerListNodes[oldIndex]);
        if (oldIndex < this.index) {//点击右边
          bannerListNodes[oldIndex].classList.add("leftHide");
          bannerListNodes[this.index].classList.add("rightShow");
        }
        if (oldIndex > this.index) {//点击左边
          bannerListNodes[oldIndex].classList.add("rightHide");
          bannerListNodes[this.index].classList.add("leftShow");
        }
        oldIndex = this.index;
      };

    });
    //封装autoplay
    function autoPlay(){
      timer = setInterval(() => {
        autoIndex = oldIndex;
        autoIndex++;
        if (autoIndex > bannerListNodes.length - 1) {
          autoIndex = 0;
        }
        clearClass(bannerListNodes[autoIndex]);
        clearClass(bannerListNodes[oldIndex]);
        bannerListNodes[oldIndex].classList.add("leftHide");
        bannerListNodes[autoIndex].classList.add("rightShow");
        oldIndex = autoIndex;
        //排他
        Object(__WEBPACK_IMPORTED_MODULE_0__justSelf_justSelf__["a" /* default */])(bannerPointsNodes, autoIndex);
      }, 3000);
    }

    //封装清除类
    function clearClass(node) {
      node.classList.remove("leftHide");
      node.classList.remove("rightShow");
      node.classList.remove("rightHide");
      node.classList.remove("leftShow");
    }


  }
});


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/*eslint-disable */
/* harmony default export */ __webpack_exports__["a"] = (function () {

});


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/*eslint-disable */
/* harmony default export */ __webpack_exports__["a"] = (function () {

});


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/*eslint-disable */
/* harmony default export */ __webpack_exports__["a"] = (function () {

  var spiderList = document.querySelectorAll(".spider>ul");
  var w = spiderList[0].offsetWidth/2;
  var h = spiderList[0].offsetHeight/2;

  spiderList.forEach((item) => {
    //循环设置li&img 及初始样式
    for (var i = 0; i < 4; i++) {
      var liNode = document.createElement("li");
      var imgNode = document.createElement("img");
      //设置li宽高
      liNode.style.width = w + "px";
      liNode.style.height = h + "px";
      imgNode.style.left=  -i%2*w +"px";
      imgNode.style.top=     -Math.floor(i/2)*h +"px";
      imgNode.src = item.dataset.src;
      liNode.appendChild(imgNode);
      item.appendChild(liNode);
      //img 初始位置
      /* i     left     top
      * 0         0         0
      * 1         -w        0
      * 2        0          -h
      * 3         -w       -h
      * 规律    -i%2*w       -Math.floor(i/2)*h
      * */
    }
  });

var spiders=document.querySelectorAll(".spider");
  spiders.forEach((item)=>{
    //鼠标移入
    item.onmouseenter=function () {
      var imgNodes=this.querySelectorAll("ul>li>img");
      //img
      /* i     left          top
      * 0         0 => 0          0=>h
      * 1         -w => -2w      0=>0
      * 2          0 => w        -h=>-h
      * 3         -w =>-w              -h=>-2h
      * */
      imgNodes.forEach((item,index)=>{
        switch (index){
          case 0:
            item.style.top = h+"px";
            break;
          case 1:
            item.style.left = -2*w+"px";
            break;
          case 2:
            item.style.left = w+"px";
            break;
          case 3:
            item.style.top = -2*h+"px";
            break;
        }
      })


    };
    //鼠标移出
    item.onmouseleave=function () {
      var imgNodes=this.querySelectorAll("ul>li>img");
      //img
      /* i     left          top
      * 0         0 => 0          0=>h
      * 1         -w => -2w      0=>0
      * 2          0 => w        -h=>-h
      * 3         -w =>-w              -h=>-2h
      * */
      imgNodes.forEach((item,index)=>{
        switch (index){
          case 0:
            item.style.top = 0;
            break;
          case 1:
            item.style.left = -w+"px";
            break;
          case 2:
            item.style.left = 0;
            break;
          case 3:
            item.style.top = -h+"px";
            break;
        }
      })
    };
  })



});


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/*eslint-disable */
/* harmony default export */ __webpack_exports__["a"] = (function () {

});


/***/ })
/******/ ]);